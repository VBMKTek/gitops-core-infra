{{- if .Values.postgres.enabled }}
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: {{ .Values.global.namespace | default "core-infra" }}
  labels:
    {{- include "core-infra.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
        fsGroup: 999
      initContainers:
      - name: fix-permissions
        image: busybox:1.35
        command: ['sh', '-c', 'chown -R 999:999 /var/lib/postgresql/data']
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: pgdata
        securityContext:
          runAsUser: 0
      containers:
      - name: postgres
        image: {{ .Values.postgres.image }}
        ports:
        - containerPort: 5432
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        env:
        - name: POSTGRES_DB
          value: {{ .Values.postgres.env.POSTGRES_DB | quote }}
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: core-infra-secrets
              key: postgres-username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: core-infra-secrets
              key: postgres-password
        - name: POSTGRES_INITDB_ARGS
          value: {{ .Values.postgres.env.POSTGRES_INITDB_ARGS | quote }}
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: pgdata
        resources:
          {{- toYaml .Values.postgres.resources | nindent 10 }}
      volumes:
      - name: postgres-storage
        {{- if .Values.postgres.persistence.enabled }}
        persistentVolumeClaim:
          claimName: postgres-pvc
        {{- else }}
        emptyDir: {}
        {{- end }}

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: {{ .Values.global.namespace | default "core-infra" }}
  labels:
    {{- include "core-infra.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  type: {{ .Values.postgres.service.type }}
  ports:
  - port: {{ .Values.postgres.service.port }}
    targetPort: 5432
    protocol: TCP
    name: postgres
    {{- if and (eq .Values.postgres.service.type "NodePort") .Values.postgres.service.nodePort }}
    nodePort: {{ .Values.postgres.service.nodePort }}
    {{- end }}
  selector:
    app: postgres

{{- if .Values.postgres.persistence.enabled }}
---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: {{ .Values.global.namespace | default "core-infra" }}
  labels:
    {{- include "core-infra.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  accessModes:
    - {{ .Values.postgres.persistence.accessMode }}
  resources:
    requests:
      storage: {{ .Values.postgres.persistence.size }}
  {{- if .Values.postgres.persistence.storageClass }}
  storageClassName: {{ .Values.postgres.persistence.storageClass }}
  {{- end }}
{{- end }}
{{- end }}